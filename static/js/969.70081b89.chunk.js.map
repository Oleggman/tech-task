{"version":3,"file":"static/js/969.70081b89.chunk.js","mappings":"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","sources":["components/Card/Card.styled.ts","components/Card/Card.tsx","components/List/List.styled.ts","components/CreateCardForm/CreateCardForm.styled.ts","components/CreateCardForm/CreateCardForm.tsx","components/List/List.tsx","pages/Board.tsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledCard = styled.li`\n  padding: 6px;\n  border-radius: 8px;\n  border: 1px solid navy;\n  background-color: antiquewhite;\n  font-weight: 500;\n  cursor: grab;\n`;\n","import React from \"react\"\nimport { CardType } from \"../List/List\"\nimport { StyledCard } from \"./Card.styled\"\nimport { useBoard } from \"../../hooks/useBoard\"\nimport * as TrelloApi from '../../services/trello-api';\n\ninterface Props {\n  card: CardType,\n  list: any,\n  dragCard: any,\n  setDragCard: any,\n  dragList: any,\n  setDragList: any\n}\n\nexport const Card: React.FC<Props> = ({ card, list, dragCard, setDragCard, dragList, setDragList }) => {\n  const { board, changeBoard } = useBoard();\n\n  const handleDragOver = (e: any) => {\n    e.preventDefault();\n    e.target.style.backgroundColor = 'lightgray';\n  }\n\n  const handleDragLeave = (e: any) => {\n    e.target.style.backgroundColor = 'antiquewhite';\n  }\n\n  const handleDragStart = (e: any) => {\n    setDragList(list);\n    setDragCard(card);\n  }\n\n  const handleDragEnd = (e: any) => {\n    e.target.style.backgroundColor = 'antiquewhite';\n  }\n\n  const handleDrop = async (e: any) => {\n    e.preventDefault();\n    e.target.style.backgroundColor = 'antiquewhite';\n    if (dragCard.id === card.id) {\n      return;\n    }\n    const currentIndex = dragList.cards.indexOf(dragCard);\n    const initialList = dragList.cards.toSpliced(currentIndex, 1);\n    const dropIndex = list.cards.indexOf(card);\n    const dropList = list.cards.toSpliced(dropIndex, 0, dragCard);\n\n    const res = await TrelloApi.moveCard(dragCard.id, list.id);\n\n    if (changeBoard && board && res.status === 200) {\n      const newBoard = board.map(item => {\n        if (item.id === dragList.id && item.id === list.id) {\n          return { ...item, cards: initialList.toSpliced(dropIndex, 0, dragCard) };\n        }\n        if (item.id === dragList.id && dragList.id !== list.id) {\n          return {...item, cards: initialList};\n        }\n        if (item.id === list.id  && dragList.id !== list.id) {\n          return {...item, cards: dropList};\n        }\n        return item;\n      })\n      \n      changeBoard(newBoard);\n    }\n  }\n\n  return (\n    <StyledCard\n      draggable={true}\n      onDragOver={(e) => handleDragOver(e)}\n      onDragLeave={(e) => handleDragLeave(e)}\n      onDragStart={(e) => handleDragStart(e)}\n      onDragEnd={(e) => handleDragEnd(e)}\n      onDrop={(e) => handleDrop(e)}\n    >{card.name}</StyledCard>\n  )\n}\n","import styled from \"styled-components\";\n\nexport const Lists = styled.ul`\n  display: flex;\n  gap: 40px;\n  flex-wrap: nowrap;\n`;\n\nexport const OneList = styled.li`\n  flex-basis: 240px;\n  flex-shrink: 0;\n  padding: 8px;\n  border-radius: 16px;\n  border: 1px solid black;\n  background-color: lavender;\n  height: fit-content;\n`;\n\nexport const ListTitle = styled.h2`\n  text-align: center;\n  font-family: \"Segoe UI\", Tahoma, Geneva, Verdana, sans-serif;\n  margin-bottom: 12px;\n  font-size: 20px;\n`;\n\nexport const CardsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-bottom: 12px;\n`;\n","import styled from \"styled-components\";\n\nexport const TextArea = styled.textarea`\n  resize: none;\n  width: 100%;\n  border-radius: 4px;\n  border: 2px solid;\n  border-color: transparent;\n  margin-bottom: 4px;\n\n  &:focus {\n    outline: none;\n    border-color: green;\n  }\n`;\n\nexport const CreateBtn = styled.button`\n  background-color: #e2e5e8;\n  border-radius: 4px;\n  color: inherit;\n  cursor: pointer;\n  padding: 6px 12px;\n  border: 1px solid;\n  border-color: black;\n  transition: border-color 300ms, background-color 300ms, color 300ms;\n\n  &:hover {\n    background-color: #1976d2;\n    color: #fff;\n    border-color: transparent;\n  }\n`;\n","import React from \"react\"\nimport { CreateBtn, TextArea } from \"./CreateCardForm.styled\"\nimport { useBoard } from \"../../hooks/useBoard\"\nimport * as TrelloApi from '../../services/trello-api';\n\ninterface Props {\n    listId: string\n}\n\nexport const CreateCardForm: React.FC<Props> = ({ listId }) => {\n    const { board, changeBoard } = useBoard();\n\n    const handleSubmit = async (e: any) => {\n        e.preventDefault();\n        const name = e.target.elements.text.value;\n        const res = await TrelloApi.addCard(listId, name);\n\n        if (changeBoard && board) {\n            const newBoard = board.map(item => {\n                if (item.id === listId) {\n                    return { ...item, cards: [...item.cards, {id: res.data?.id, name}]}\n                }\n                return item;\n            })\n\n            changeBoard(newBoard);\n        }\n\n        e.target.reset();\n    }\n\n  return (\n    <form onSubmit={handleSubmit}>\n        <TextArea name=\"text\" placeholder=\"Create new card\"/>\n        <CreateBtn type=\"submit\">Create card</CreateBtn>\n    </form>\n  )\n}\n","import React, { useEffect, useRef, useState } from \"react\"\nimport { ListType } from \"../../pages/Board\"\nimport * as TrelloApi from '../../services/trello-api';\nimport { Card } from \"../Card/Card\";\nimport { useBoard } from \"../../hooks/useBoard\";\nimport { CardsList, ListTitle, Lists, OneList } from \"./List.styled\";\nimport { CreateCardForm } from \"../CreateCardForm/CreateCardForm\";\n\ninterface Props {\n  lists: Array<ListType> | undefined,\n}\n\nexport type CardType = {\n  id: string,\n  name:string,\n}\n\nexport type AllLists = { cards: CardType[], id: string, name: string }[];\n\ntype FullList = { cards: CardType[], id: string, name: string };\n\nexport const List: React.FC<Props> = ({ lists }) => {\n  const [allLists, setAllLists] = useState<AllLists | null>(null);\n  const { board, changeBoard } = useBoard();\n  const isListLoaded: React.MutableRefObject<boolean> = useRef(false);\n  // Drag and drop states\n  const [currentList, setCurrentList] = useState<FullList>();\n  const [currentCard, setCurrentCard] = useState<CardType>();\n\n  useEffect(() => {\n    const getAllListsById = async () => {\n      if (lists) {\n        const listsWithCards = await Promise.all(lists?.map(async (item) => {\n          const list = await TrelloApi.getListById(item.id);\n          return list;\n        }));\n\n        const fullLists = lists.map((item, index) => ({\n          ...item,\n          cards: listsWithCards[index]\n        }));\n        \n        setAllLists(fullLists);\n      }\n    }\n    getAllListsById();\n\n    return () => {\n      setAllLists(null);\n      isListLoaded.current = false;\n    }\n  }, [lists])\n\n  if (changeBoard && !isListLoaded.current && allLists) {\n    changeBoard(allLists);\n    isListLoaded.current = true;\n  }\n\n  const handleDragOver = (e: any) => {\n    e.preventDefault();\n  }\n\n  const handleDropCard = async (e: any, list: any) => {\n    e.preventDefault();\n    if (list.cards.length !== 0 || !currentList || !currentCard) {\n      return;\n    }\n\n    const currentIndex = currentList.cards.indexOf(currentCard);\n    currentList.cards.splice(currentIndex, currentIndex + 1);\n    const newList = [currentCard]\n\n    const res = await TrelloApi.moveCard(currentCard?.id, list.id);\n\n    if (changeBoard && board && res.status === 200) {\n      const newBoard = board.map(item => {\n        if (item.id === currentList.id) {\n          return { ...item, cards: currentList.cards };\n        }\n        if (item.id === list.id) {\n          return { ...item, cards: newList };\n        }\n        return item;\n      })\n      \n      changeBoard(newBoard);\n    }\n  }\n  return (\n    <>\n      {allLists &&\n      <Lists>\n          {board?.map(list =>\n            <OneList key={list.id} onDragOver={(e) => handleDragOver(e)} onDrop={(e) => handleDropCard(e, list)}>\n              <ListTitle>{list.name}</ListTitle>\n              <CardsList>\n                {list.cards.map(card =>\n                  <Card\n                    key={card.id} card={card} list={list}\n                    dragCard={currentCard} setDragCard={setCurrentCard}\n                    dragList={currentList} setDragList={setCurrentList}\n                  />)}\n              </CardsList>\n              \n              <CreateCardForm listId={list.id} />\n            </OneList>)}\n        </Lists>}\n      {!allLists && <h2>Loading...</h2>}\n    </>\n  )\n}","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport * as TrelloApi from '../services/trello-api';\nimport { List } from \"../components/List/List\";\nimport { BoardTitle } from \"../components/SharedLayout/SharedLayout.styled\";\n\nexport type ListType = {\n    id: string,\n    name: string,\n}\n\ntype BoardType = {\n    id: string,\n    name: string,\n    lists: Array<ListType>,\n}\n\nconst Board = () => {\n    const [board, setBoard] = useState<BoardType | null>(null);\n    const { boardId } = useParams();\n\n    useEffect(() => {\n        const fetchBoardById = async () => {\n            const board = await TrelloApi.getBoardById(boardId);\n            setBoard(board);\n        }\n\n        fetchBoardById();\n    }, [boardId])\n\n    return (\n        <div>\n            <BoardTitle>{board?.name}</BoardTitle>\n            <List lists={board?.lists} />\n        </div>\n    )\n}\n\nexport default Board;"],"names":["StyledCard","styled","li","_templateObject","_taggedTemplateLiteral","Card","_ref","card","list","dragCard","setDragCard","dragList","setDragList","board","changeBoard","useBoard","_jsx","draggable","onDragOver","e","preventDefault","target","style","backgroundColor","handleDragOver","onDragLeave","handleDragLeave","onDragStart","onDragEnd","handleDragEnd","onDrop","async","id","currentIndex","cards","indexOf","initialList","toSpliced","dropIndex","dropList","res","TrelloApi","status","newBoard","map","item","handleDrop","children","name","Lists","ul","OneList","_templateObject2","ListTitle","h2","_templateObject3","CardsList","_templateObject4","TextArea","textarea","CreateBtn","button","CreateCardForm","listId","_jsxs","onSubmit","elements","text","value","_res$data","data","reset","placeholder","type","List","lists","allLists","setAllLists","useState","isListLoaded","useRef","currentList","setCurrentList","currentCard","setCurrentCard","useEffect","listsWithCards","Promise","all","fullLists","index","getAllListsById","current","_Fragment","length","splice","newList","handleDropCard","Board","setBoard","boardId","useParams","fetchBoardById","BoardTitle"],"sourceRoot":""}